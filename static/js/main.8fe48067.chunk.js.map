{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Submit","props","useState","value","valid","msg","number","setNumber","select","setSelect","name","countries","setCountries","useEffect","a","fetch","headers","response","json","data","results","handleCountry","e","target","textContent","document","querySelector","className","Container","fluid","Row","Col","xs","data-content","Form","onClick","Collapse","isOpen","style","height","overflowY","position","zIndex","map","country","i","key","FormGroup","Input","id","invalid","placeholder","onChange","range","s","length","c","charAt","indexOf","isEmpty","test","isInteger","type","FormFeedback","disabled","history","push","cursor","Welcome","letterSpacing","propTypes","PropTypes","string","bool","children","node","oneOfType","columnProps","shape","size","sm","md","lg","xl","Forms","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8fe48067.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport {\r\n  Container, Row,Col,Form,Input,FormGroup,FormFeedback,\r\n  Collapse\r\n} from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n \r\nimport './Form.css';\r\n\r\n\r\nlet whitespace = \"\\t\\n\\r\";\r\n\r\nconst isEmpty = (s) =>{\r\n  let i;\r\n  if( (s === null)  || s.length === 0 ) return true;\r\n\r\n  \r\n  //search string look for character that are not white space\r\n\r\n  for (i = 0; i < s.length; i++)    {  \r\n     var c = s.charAt(i);\r\n     if (whitespace.indexOf(c) === -1) return false;\r\n    }\r\n  \r\n    //At this point all character are white space\r\n    return true;\r\n\r\n  // return /\\t\\n\\r/.test(s);\r\n}\r\n\r\nconst isInteger = (value)=>{ return /^-?\\d+$/.test(value);}\r\n\r\n\r\n\r\nconst isEmail = (s)=>{\r\n  return /[^@]+@(\\w+\\.)+\\w+/.test(s);\r\n}\r\n\r\n\r\n \r\nexport const Submit = (props) => {\r\n\r\n    const [number, setNumber] = useState({value:'',valid:false,msg:''});\r\n\r\n    const [select, setSelect] = useState(false);\r\n\r\n    const [countries,setCountries] = useState([{name:''}]);\r\n\r\n\r\n     useEffect(()=>{\r\n    async function data (){\r\n        const response = await fetch( 'https://parseapi.back4app.com/classes/Country?count=1&limit=250&order=name&keys=name',{\r\n            headers:{\r\n                'X-Parse-Application-Id': 'mxsebv4KoWIGkRntXwyzg6c6DhKWQuit8Ry9sHja', // This is the fake app's application id\r\n                'X-Parse-Master-Key': 'TpO0j3lG2PmEVMXlKYQACoOXKQrL3lwM0HwR9dbH', // This is the fake app's readonly master key\r\n  \r\n            }\r\n        });\r\n\r\n        const data = await response.json();\r\n        setCountries(data.results);\r\n         \r\n    }\r\n    data();\r\n     },[]);\r\n\r\n    const toggleSelect = ()=> setSelect(!select);\r\n  \r\n    const phoneNumber = (e)=>{\r\n         \r\n\r\n      let value = e.target.value;\r\n      setNumber({...number,value});\r\n      let max = 11, range;\r\n  \r\n     if(isEmpty(value)){ \r\n       setNumber({...number,valid:false,value,msg:'Field is required'});\r\n     }else{\r\n\r\n       if(isInteger(value)){\r\n         //let num = parseInt(value);\r\n         range = value.length === max ;\r\n  \r\n         if(!range) {  \r\n              setNumber({...number,value,valid:false,msg:'A max of 11 character'}); \r\n         }\r\n         else{ \r\n           setNumber({...number,value,valid:true,msg:''});\r\n         }\r\n  \r\n       }else{\r\n          value = e.target.value; \r\n         setNumber({...number,value,valid:false,msg:'Digits only'});\r\n       }\r\n  \r\n     }\r\n        \r\n    };\r\n  \r\n  \r\n  \r\n    const handleSubmit = (e)=>{\r\n      if(number.valid){\r\n     props.history.push('welcome'); \r\n      }\r\n \r\n       \r\n    }\r\n \r\n   const handleCountry = (e)=>{\r\n       let value = e.target.textContent;\r\n       document.querySelector('.country').textContent = value;\r\n   }\r\n\r\n    return (\r\n    <>\r\n   \r\n    <div className=\"submit_container bg-white text-center\">\r\n  \r\n    <Container fluid={true}>\r\n  \r\n      <Row>\r\n  \r\n    <Col xs=\"12\" className=\"text-center p-4 bg-pri my-auto\">\r\n    \r\n<span className=\"brand my-3 text-uppercase\" data-content=\"p\">p</span>\r\n          <h3 className=\"text-capitalize\">panfinder</h3>\r\n    </Col>\r\n  \r\n    <Col className=\"p-4 text-center\" xs=\"12\">\r\n         \r\n         <Form className=\"mt-4\">\r\n\r\n            <div className=\"w-100\"> \r\n          <div className=\"cus-input my-4 text-capitalize text-dark d-flex justify-content-between align-items-center\">\r\n              <span className=\"mx-3 country font-weight-bold\">select a country</span><i className=\"fas fa-angle-down mx-3 text-pri\" onClick={toggleSelect}></i>\r\n              </div> \r\n              <Collapse isOpen={select} className=\"w-50 bg-white shadow\" style={{\r\n       height:'200px',\r\n       overflowY:'scroll',\r\n       position:'absolute',\r\n       zIndex:'500'\r\n    }\r\n}>\r\n                  <ul className=\"list-unstyled\"> \r\n                 {\r\n                     countries.map((country,i)=>{\r\n                  return <li className=\"w-100 hover-bg-pri p-2\" key={i} onClick={handleCountry}>{country.name}</li>;\r\n                     })\r\n\r\n                     }\r\n                  </ul>\r\n              </Collapse>\r\n              </div>\r\n            \r\n            <FormGroup> \r\n            <Input id=\"number\" valid={number.valid  ? true : false } invalid={ number.valid ? false : true } placeholder=\"Phone Number\" value={number.value} onChange={phoneNumber} className=\"my-4  font-weight-bold\" type=\"text\"/> \r\n            <FormFeedback  invalid>{number.msg}</FormFeedback>\r\n              </FormGroup>\r\n  \r\n           <div className='w mt-4 mb-5'></div>\r\n  \r\n           <button disabled={number.valid ? false : true } onClick={handleSubmit} className='bg-pri mt-4 text-uppercase cus-input' style={number.valid ?  {cursor:'pointer'} : {cursor:'not-allowed'}}>Submit</button>\r\n           </Form>\r\n  \r\n    </Col>\r\n  \r\n    \r\n        </Row>\r\n  \r\n    </Container>\r\n  \r\n    </div>\r\n  \r\n    </>\r\n    );\r\n  }\r\n\r\n\r\n  export const Welcome  = ()=>{\r\n\r\n    return (\r\n        <> \r\n<div className=\"h\"> \r\n<div className=\"width\">\r\n\r\n<h6>Welcome</h6>\r\n<h3 className='text-capitalize text-nowrap font-weight-bold' style={{letterSpacing:'6px'}}>Tolu Akinsowo</h3>\r\n<button className=\"text-uppercase w-100 text-center bg-pri cus-input\">finish</button>\r\n \r\n </div>\r\n\r\n <div className=\"arrow-up\"></div>  \r\n </div>\r\n  \r\n                   </>\r\n \r\n    )\r\n  }\r\n\r\n\r\n \r\n\r\nconst Forms = ()=>{ \r\n    return (\r\n        <>\r\n       <h2>Hello world</h2>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nFormFeedback.propTypes = {\r\n     // default: 'div'\r\n    className: PropTypes.string,\r\n    \r\n    valid: PropTypes.bool,  \r\n   \r\n  };\r\n\r\n  FormGroup.propTypes = {\r\n    className: PropTypes.string,\r\n  };\r\n\r\n  Form.propTypes = {\r\n   className: PropTypes.string,\r\n    };\r\n\r\n    Input.propTypes = {\r\n        children: PropTypes.node,\r\n        \r\n        type: PropTypes.string,\r\n         valid: PropTypes.bool,  \r\n        invalid: PropTypes.bool,  \r\n         className: PropTypes.string,\r\n        \r\n      };\r\n\r\n      Container.propTypes = {\r\n        fluid: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])\r\n         \r\n      }\r\n\r\n      const columnProps = PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number,\r\n        PropTypes.bool,\r\n        PropTypes.shape({\r\n          size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\r\n         \r\n        })\r\n      ]);\r\n\r\n      Col.propTypes = {\r\n        xs: columnProps,\r\n        sm: columnProps,\r\n        md: columnProps,\r\n        lg: columnProps,\r\n        xl: columnProps,\r\n\r\n      }\r\n \r\nexport default Forms;\r\n","import React from 'react';\nimport {HashRouter as Router,Route } from 'react-router-dom';\nimport {Submit, Welcome} from './components/Form';\n\n\n\nconst App = ()=>{\n  return (\n    <>\n\n<Router basename=\"/\"> \n\n<Route exact path=\"/\" component={Submit} />\n<Route exact path=\"/Welcome\" component={Welcome} />\n\n  </Router>\n\n    </>\n  )\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}